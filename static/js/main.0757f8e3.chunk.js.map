{"version":3,"sources":["component/IndicatorRow/Indicator/Indicator.js","component/IndicatorRow/IndicatorRow.js","component/Box/Box.js","component/Grid/Grid.js","container/Board/Board.js","App.js","index.js"],"names":["Indicator","props","numbers","map","n","i","key","className","alignment","IndicatorRow","orientation","indicators","index","Box","checked","onClick","clicked","onContextMenu","console","log","Grid","grid","handleBoxChange","row","rowIndex","checkVal","boxIndex","Board","useState","setGrid","top","side","setIndicators","puzzle","useEffect","gridSize","length","Array","fill","emptyGrid","newRow","push","column","topCount","forEach","r","sideCount","calculateAndSetIndicators","boxNumber","newGrid","boxValue","splice","currentGrid","solutionGrid","k","gameWinCheck","alert","App","setPuzzle","puzzles","changePuzzle","e","puzzleNumber","target","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0757f8e3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Indicator.css\";\n\nconst Indicator = props => {\n  return props.numbers.map((n, i) => {\n    return (\n      <div key={i} className={props.alignment}>\n        {n}\n      </div>\n    );\n  });\n};\n\nexport default Indicator;\n","import React from \"react\";\nimport \"./IndicatorRow.css\";\nimport Indicator from \"./Indicator/Indicator\";\n\nconst IndicatorRow = props => {\n  return (\n    <div className={`row_indicator_${props.orientation}`}>\n      {props.indicators.map((numbers, index) => {\n        return (\n          <div\n            key={index}\n            className={`row_indicator_group_${props.orientation}`}\n          >\n            <Indicator\n              alignment={\n                props.orientation === \"horizontal\" ? \"vertical\" : \"horizontal\"\n              }\n              numbers={numbers}\n            ></Indicator>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default IndicatorRow;\n","import React from \"react\";\nimport \"./Box.css\";\n\nconst Box = props => {\n  const box = props.checked ? (\n    <div\n      className=\"box_checked\"\n      onClick={props.clicked}\n      onContextMenu={() => console.log(\"right click!\")}\n    ></div>\n  ) : (\n    <div\n      className=\"box_unchecked\"\n      onClick={props.clicked}\n      onContextMenu={() => console.log(\"right click!\")}\n    ></div>\n  );\n  return box;\n};\n\nexport default Box;\n","import React from \"react\";\nimport Box from \"../Box/Box\";\n\nconst Grid = props => {\n  const { grid, handleBoxChange } = props;\n  return grid.map((row, rowIndex) => {\n    return (\n      <div key={rowIndex} className=\"row\">\n        {row.map((checkVal, boxIndex) => {\n          return (\n            <Box\n              key={\"\" + rowIndex + boxIndex}\n              checked={checkVal}\n              clicked={() => handleBoxChange([rowIndex, boxIndex])}\n            ></Box>\n          );\n        })}\n      </div>\n    );\n  });\n};\n\nexport default Grid;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Board.css\";\nimport IndicatorRow from \"../../component/IndicatorRow/IndicatorRow\";\nimport Grid from \"../../component/Grid/Grid\";\n\nconst Board = props => {\n  const [grid, setGrid] = useState([\n    [false, false, false, false, false],\n    [false, false, false, false, false],\n    [false, false, false, false, false],\n    [false, false, false, false, false],\n    [false, false, false, false, false]\n  ]);\n  const [indicators, setIndicators] = useState({ top: [], side: [] });\n\n  const { puzzle } = props;\n\n  useEffect(() => {\n    const gridSize = puzzle.length;\n    let row = Array(gridSize).fill(false);\n    let emptyGrid = [];\n\n    for (let i = 0; i < gridSize; i++) {\n      let newRow = [...row];\n      emptyGrid.push(newRow);\n    }\n\n    //clears grid and recalculates indicators\n    setGrid(emptyGrid);\n    calculateAndSetIndicators();\n  }, [puzzle]);\n\n  function calculateAndSetIndicators() {\n    let top = [];\n    let side = [];\n\n    //logic for top row\n    for (let i = 0; i < puzzle.length; i++) {\n      let column = [];\n      let topCount = 0;\n      puzzle.forEach(r => {\n        if (r[i]) {\n          topCount++;\n        } else if (topCount) {\n          column.push(topCount);\n          topCount = 0;\n        }\n      });\n      //only push count if it isn't 0. this accounts for the last row of the column being true;\n      if (topCount) {\n        column.push(topCount);\n      }\n      //after counting indicator numbers. push to top and result topColumn.\n      top.push(column);\n      column = [];\n    }\n\n    //logic for side row\n    let sideCount = 0;\n    let row = [];\n    for (let i = 0; i < puzzle.length; i++) {\n      puzzle[i].forEach(r => {\n        if (r) {\n          sideCount++;\n        } else if (sideCount) {\n          row.push(sideCount);\n          sideCount = 0;\n        }\n      });\n      if (sideCount) {\n        row.push(sideCount);\n        sideCount = 0;\n      }\n      side.push(row);\n      row = [];\n    }\n\n    setIndicators({ top: top, side: side });\n  }\n\n  //sets new state when a box is clicked.\n  function handleBoxChange(boxNumber) {\n    let [row, column] = boxNumber;\n\n    let newGrid = [...grid];\n    let boxValue = newGrid[row][column];\n    //replace grid item with it's toggle value.\n    newGrid[row].splice(column, 1, !boxValue);\n    //update grid\n    setGrid(newGrid);\n\n    if (gameWinCheck(newGrid, puzzle)) {\n      alert(\"You Win!\");\n    }\n  }\n\n  function gameWinCheck(currentGrid, solutionGrid) {\n    for (let i = 0; i < currentGrid.length; i++) {\n      for (let k = 0; k < currentGrid[i].length; k++) {\n        if (currentGrid[i][k] !== solutionGrid[i][k]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return (\n    <div className=\"game-board\">\n      <div className=\"topInd\">\n        <IndicatorRow\n          indicators={indicators.top}\n          orientation=\"horizontal\"\n        ></IndicatorRow>\n      </div>\n      <div className=\"sideInd\">\n        <IndicatorRow\n          className=\"sideInd\"\n          indicators={indicators.side}\n          orientation=\"vertical\"\n        ></IndicatorRow>\n      </div>\n      <div className=\"board\">\n        <Grid grid={grid} handleBoxChange={handleBoxChange} />\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Board from \"./container/Board/Board\";\n\nfunction App() {\n  const [puzzle, setPuzzle] = useState([\n    [true, false, false, false, false],\n    [true, true, true, true, false],\n    [false, false, true, true, true],\n    [false, false, true, true, true],\n    [true, true, true, true, false]\n  ]);\n\n  const puzzles = {\n    \"1\": [\n      [true, false, false, false, false],\n      [true, true, true, true, false],\n      [false, false, true, true, true],\n      [false, false, true, true, true],\n      [true, true, true, true, false]\n    ],\n    \"2\": [\n      [false, false, true, true, true],\n      [false, false, false, true, true],\n      [false, false, true, true, true],\n      [true, true, false, true, false],\n      [true, true, false, false, false]\n    ]\n  };\n\n  function changePuzzle(e) {\n    const puzzleNumber = e.target.value;\n    setPuzzle(puzzles[puzzleNumber]);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>P I C R O S S</h1>\n      <button value=\"1\" onClick={e => changePuzzle(e)}>\n        1\n      </button>\n      <button value=\"2\" onClick={e => changePuzzle(e)}>\n        2\n      </button>\n      <Board puzzle={puzzle} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}